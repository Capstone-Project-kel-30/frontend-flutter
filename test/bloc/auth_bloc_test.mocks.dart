// Mocks generated by Mockito 5.2.0 from annotations
// in workout_zone/test/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;
import 'package:workout_zone/models/user_model.dart' as _i2;
import 'package:workout_zone/services/locals/user_info_service.dart' as _i6;
import 'package:workout_zone/services/remotes/auth_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserModel_0 extends _i1.Fake implements _i2.UserModel {}

class _FakeSharedPreferences_1 extends _i1.Fake
    implements _i3.SharedPreferences {}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserModel> register(
          {String? name, String? email, String? phone, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#register, [], {
                #name: name,
                #email: email,
                #phone: phone,
                #password: password
              }),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<_i2.UserModel> login({String? email, String? password}) => (super
      .noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0())) as _i5
      .Future<_i2.UserModel>);
  @override
  _i5.Future<_i2.UserModel> verifyEmail({String? email}) =>
      (super.noSuchMethod(Invocation.method(#verifyEmail, [], {#email: email}),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<_i2.UserModel> resetPassword({String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #resetPassword, [], {#email: email, #password: password}),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
}

/// A class which mocks [UserInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoService extends _i1.Mock implements _i6.UserInfoService {
  MockUserInfoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SharedPreferences get sharedPreferences =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferences),
          returnValue: _FakeSharedPreferences_1()) as _i3.SharedPreferences);
  @override
  _i2.UserModel getUserInfo() =>
      (super.noSuchMethod(Invocation.method(#getUserInfo, []),
          returnValue: _FakeUserModel_0()) as _i2.UserModel);
  @override
  _i5.Future<void> updateUserInfo(
          {String? token,
          bool? hasLogin,
          int? id,
          String? name,
          String? email,
          String? phone,
          String? password,
          String? memberType}) =>
      (super.noSuchMethod(
          Invocation.method(#updateUserInfo, [], {
            #token: token,
            #hasLogin: hasLogin,
            #id: id,
            #name: name,
            #email: email,
            #phone: phone,
            #password: password,
            #memberType: memberType
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> resetUserInfo() =>
      (super.noSuchMethod(Invocation.method(#resetUserInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
