// Mocks generated by Mockito 5.2.0 from annotations
// in workout_zone/test/bloc/all_class_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:workout_zone/models/class_model.dart' as _i3;
import 'package:workout_zone/services/remotes/class_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeClassModel_1 extends _i1.Fake implements _i3.ClassModel {}

/// A class which mocks [ClassService].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassService extends _i1.Mock implements _i4.ClassService {
  MockClassService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  _i5.Future<_i3.ClassModel> getAllOfflineClass() =>
      (super.noSuchMethod(Invocation.method(#getAllOfflineClass, []),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i5.Future<_i3.ClassModel>);
  @override
  _i5.Future<_i3.ClassModel> getOfflineClassById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getOfflineClassById, [id]),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i5.Future<_i3.ClassModel>);
  @override
  _i5.Future<_i3.ClassModel> getAllOnlineClass() =>
      (super.noSuchMethod(Invocation.method(#getAllOnlineClass, []),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i5.Future<_i3.ClassModel>);
  @override
  _i5.Future<_i3.ClassModel> getOnlineClassById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getOnlineClassById, [id]),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i5.Future<_i3.ClassModel>);
  @override
  _i5.Future<_i3.ClassModel> getAllClass() =>
      (super.noSuchMethod(Invocation.method(#getAllClass, []),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i5.Future<_i3.ClassModel>);
}
